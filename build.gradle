plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group = 'fr.world.nations'
version = '0.9-Alpha'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "upstream"
        url = "https://ci.nametagedit.com/plugin/repository/everything/"
    }
    maven {
        name = "sk89q-repo"
        url = "https://maven.enginehub.org/repo/"
    }
}

configurations {
    allDependencies {
        extendsFrom implementation
        canBeResolved = true
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT"
    compileOnly fileTree(dir: 'libs', include: '*.jar')
    compileOnly "com.sk89q.worldedit:worldedit-bukkit:7.2.10"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    implementation group: 'com.zaxxer', name: 'HikariCP', version: '5.0.1'

    implementation 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'fr.world.nations.Core'
    }
}

shadowJar {
    archiveBaseName.set(rootProject.name)
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest {
        attributes 'Main-Class': 'fr.world.nations.Core'
    }
    mergeServiceFiles()

    configurations = [project.configurations.allDependencies]
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
